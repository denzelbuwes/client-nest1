name: Auto Deploy to AWS CloudFormation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ arn:aws:iam::763338915451:role/GitHubOIDCDeployRole }}
          aws-region: af-south-1

      - name: Install AWS CLI (if not already)
        run: |
          if (-not (Get-Command aws -ErrorAction SilentlyContinue)) {
            Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
            Start-Process msiexec.exe -Wait -ArgumentList '/i AWSCLIV2.msi /quiet'
          }
          aws --version
        shell: pwsh

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
        shell: pwsh

      - name: Run Django Migrations (optional)
        run: |
          cd backend
          python manage.py migrate --check
        shell: pwsh

      - name: Run Tests
        run: |
          cd backend
          python manage.py test
        shell: pwsh

      - name: Generate Database Password
        run: |
          $dbPassword = -join ((33..126) | Get-Random -Count 16 | ForEach-Object {[char]$_})
          echo "DB_PASSWORD=$dbPassword" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://clientnest-vpc.yaml
        shell: pwsh

      - name: Deploy CloudFormation Stack
        run: |
          $stackName = "nest"
          aws cloudformation deploy `
            --template-file clientnest-vpc.yaml `
            --stack-name $stackName `
            --capabilities CAPABILITY_NAMED_IAM `
            --parameter-overrides `
              DatabasePassword=$env:DB_PASSWORD `
            --no-fail-on-empty-changeset
        shell: pwsh

      - name: Wait for Database to be Available
        run: |
          $stackName = "nest"
          $dbEndpoint = aws cloudformation describe-stacks --stack-name $stackName --query 'Stacks[0].Outputs[?OutputKey==`DatabaseEndpoint`].OutputValue' --output text
          Write-Host "Waiting for database endpoint: $dbEndpoint"
          
          # Wait for RDS instance to be available
          aws rds wait db-instance-available --db-instance-identifier "ClientNest-Dev-postgres"
          Write-Host "Database is now available"
        shell: pwsh

